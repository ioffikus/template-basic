"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var ts = require("typescript");
var Lint = require("tslint");
var tsutils_1 = require("tsutils");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithFunction(sourceFile, walk);
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
function walk(ctx) {
    var seen = new Set();
    var enums = [];
    var declarations = [];
    var variables = tsutils_1.collectVariableUsage(ctx.sourceFile);
    variables.forEach(function (variable, identifier) {
        if (identifier.parent.kind !== ts.SyntaxKind.EnumDeclaration || seen.has(identifier))
            return;
        var track = {
            name: identifier.text,
            isConst: tsutils_1.hasModifier(identifier.parent.modifiers, ts.SyntaxKind.ConstKeyword),
            declarations: [],
            members: new Map(),
            canBeConst: !variable.inGlobalScope && !variable.exported,
            uses: variable.uses,
        };
        for (var _i = 0, _a = variable.declarations; _i < _a.length; _i++) {
            var declaration = _a[_i];
            seen.add(declaration);
            if (declaration.parent.kind !== ts.SyntaxKind.EnumDeclaration) {
                track.canBeConst = false;
            }
            else {
                track.declarations.push(declaration.parent);
                declarations.push({
                    track: track,
                    declaration: declaration.parent
                });
            }
        }
        enums.push(track);
    });
    declarations.sort(function (a, b) { return a.declaration.pos - b.declaration.pos; });
    for (var _i = 0, declarations_1 = declarations; _i < declarations_1.length; _i++) {
        var _a = declarations_1[_i], track = _a.track, declaration = _a.declaration;
        for (var _b = 0, _c = declaration.members; _b < _c.length; _b++) {
            var member = _c[_b];
            var isConst = track.isConst ||
                member.initializer === undefined ||
                isConstInitializer(member.initializer, track.members, findEnum);
            track.members.set(tsutils_1.getPropertyName(member.name), isConst);
            if (!isConst)
                track.canBeConst = false;
        }
    }
    for (var _d = 0, enums_1 = enums; _d < enums_1.length; _d++) {
        var track = enums_1[_d];
        if (track.isConst || !track.canBeConst || !onlyConstUses(track))
            continue;
        for (var _e = 0, _f = track.declarations; _e < _f.length; _e++) {
            var declaration = _f[_e];
            ctx.addFailure(declaration.name.pos - 4, declaration.name.end, "Enum '" + track.name + "' can be a 'const enum'.", Lint.Replacement.appendText(declaration.name.pos - 4, 'const '));
        }
    }
    function findEnum(name) {
        for (var _i = 0, enums_2 = enums; _i < enums_2.length; _i++) {
            var track = enums_2[_i];
            if (track.name !== name.text)
                continue;
            for (var _a = 0, _b = track.uses; _a < _b.length; _a++) {
                var use = _b[_a];
                if (use.location === name)
                    return track;
            }
        }
    }
}
function onlyConstUses(track) {
    for (var _i = 0, _a = track.uses; _i < _a.length; _i++) {
        var use = _a[_i];
        if (use.domain & 2 || use.domain === 1)
            continue;
        if (use.domain & 8)
            return false;
        var parent = use.location.parent;
        switch (parent.kind) {
            default:
                return false;
            case ts.SyntaxKind.ElementAccessExpression:
                if (parent.argumentExpression === undefined ||
                    parent.argumentExpression.kind !== ts.SyntaxKind.StringLiteral)
                    return false;
                break;
            case ts.SyntaxKind.PropertyAccessExpression:
        }
    }
    return true;
}
function isConstInitializer(initializer, members, findEnum) {
    return (function isConst(node) {
        switch (node.kind) {
            case ts.SyntaxKind.Identifier:
                return members.get(node.text) === true;
            case ts.SyntaxKind.StringLiteral:
            case ts.SyntaxKind.NumericLiteral:
                return true;
            case ts.SyntaxKind.PrefixUnaryExpression:
                return isConst(node.operand);
            case ts.SyntaxKind.ParenthesizedExpression:
                return isConst(node.expression);
        }
        if (tsutils_1.isPropertyAccessExpression(node)) {
            if (!tsutils_1.isIdentifier(node.expression))
                return false;
            var track = findEnum(node.expression);
            return track !== undefined && track.members.get(node.name.text) === true;
        }
        if (tsutils_1.isElementAccessExpression(node)) {
            if (!tsutils_1.isIdentifier(node.expression) || node.argumentExpression === undefined || !tsutils_1.isStringLiteral(node.argumentExpression))
                return false;
            var track = findEnum(node.expression);
            return track !== undefined && track.members.get(node.argumentExpression.text) === true;
        }
        if (tsutils_1.isBinaryExpression(node))
            return node.operatorToken.kind !== ts.SyntaxKind.AsteriskAsteriskToken &&
                node.operatorToken.kind !== ts.SyntaxKind.AmpersandAmpersandToken &&
                node.operatorToken.kind !== ts.SyntaxKind.BarBarToken &&
                !tsutils_1.isAssignmentKind(node.operatorToken.kind) &&
                isConst(node.left) && isConst(node.right);
        return false;
    })(initializer);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlZmVyQ29uc3RFbnVtUnVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInByZWZlckNvbnN0RW51bVJ1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0JBQWlDO0FBQ2pDLDZCQUErQjtBQUMvQixtQ0FHaUI7QUFFakI7SUFBMEIsZ0NBQXVCO0lBQWpEOztJQUlBLENBQUM7SUFIVSxvQkFBSyxHQUFaLFVBQWEsVUFBeUI7UUFDbEMsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUNMLFdBQUM7QUFBRCxDQUFDLEFBSkQsQ0FBMEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBSWhEO0FBSlksb0JBQUk7QUFvQmpCLGNBQWMsR0FBMkI7SUFDckMsSUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQWlCLENBQUM7SUFDdEMsSUFBTSxLQUFLLEdBQVksRUFBRSxDQUFDO0lBQzFCLElBQU0sWUFBWSxHQUFtQixFQUFFLENBQUM7SUFDeEMsSUFBTSxTQUFTLEdBQUcsOEJBQW9CLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZELFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBQyxRQUFRLEVBQUUsVUFBVTtRQUNuQyxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTyxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ2xGLE1BQU0sQ0FBQztRQUNYLElBQU0sS0FBSyxHQUFVO1lBQ2pCLElBQUksRUFBRSxVQUFVLENBQUMsSUFBSTtZQUNyQixPQUFPLEVBQUUscUJBQVcsQ0FBQyxVQUFVLENBQUMsTUFBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQztZQUM5RSxZQUFZLEVBQUUsRUFBRTtZQUNoQixPQUFP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